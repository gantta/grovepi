{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates the backend resources for Grovepi IOT",
    "Mappings" : {
        "RegionMap" : {
            "us-east-1" : { "S3hostedzoneID" : "Z3AQBSTGFYJSTF", "websiteendpoint" : "s3-website-us-east-1.amazonaws.com" },
            "us-west-1" : { "S3hostedzoneID" : "Z2F56UZL2M1ACD", "websiteendpoint" : "s3-website-us-west-1.amazonaws.com" },
            "us-west-2" : { "S3hostedzoneID" : "Z3BJ6K6RIION7M", "websiteendpoint" : "s3-website-us-west-2.amazonaws.com" },
            "eu-west-1" : { "S3hostedzoneID" : "Z1BKCTXD74EZPE", "websiteendpoint" : "s3-website-eu-west-1.amazonaws.com" },
            "ap-southeast-1" : { "S3hostedzoneID" : "Z3O0J2DXBE1FTB", "websiteendpoint" : "s3-website-ap-southeast-1.amazonaws.com" },
            "ap-southeast-2" : { "S3hostedzoneID" : "Z1WCIGYICN2BYD", "websiteendpoint" : "s3-website-ap-southeast-2.amazonaws.com" },
            "ap-northeast-1" : { "S3hostedzoneID" : "Z2M4EHUR26P7ZW", "websiteendpoint" : "s3-website-ap-northeast-1.amazonaws.com" },
            "sa-east-1" : { "S3hostedzoneID" : "Z31GFT0UA1I2HV", "websiteendpoint" : "s3-website-sa-east-1.amazonaws.com" }
        }
    },
    "Parameters": {
      "RootDomainName": {
            "Description": "iot.adamgantt.com",
            "Type": "String"
      }
    },
    "Resources": {
      "SBSRootBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
              "BucketName" : {"Ref":"RootDomainName"},
              "AccessControl": "PublicRead",
              "WebsiteConfiguration": {
                  "IndexDocument":"index.html",
                  "ErrorDocument":"404.html"
              }
          }
      },
      "SBSWWWBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
              "BucketName": {
                  "Fn::Join": ["", ["www.", {"Ref":"RootDomainName"}]]
              },
              "AccessControl": "BucketOwnerFullControl",
              "WebsiteConfiguration": {
                  "RedirectAllRequestsTo": {
                      "HostName": {"Ref": "SBSRootBucket"}
                  }
              }
          }
      },
      "WWWBucketPolicy" : {
        "Type" : "AWS::S3::BucketPolicy",
        "Properties" : {
          "Bucket" : { "Ref" : "SBSWWWBucket" },
          "PolicyDocument": {
            "Statement":[{
      	    "Action":["s3:GetObject"],
      	    "Effect":"Allow",
      	    "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "SBSWWWBucket" } , "/*" ]]},
      	    "Principal":"*"
            }]
          }
        }
      },
      "WebRootBucketPolicy" : {
        "Type" : "AWS::S3::BucketPolicy",
        "Properties" : {
          "Bucket" : { "Ref" : "SBSRootBucket" },
          "PolicyDocument": {
            "Statement":[{
      	    "Action":["s3:GetObject"],
      	    "Effect":"Allow",
      	    "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "SBSRootBucket" } , "/*" ]]},
      	    "Principal":"*"
            }]
          }
        }
      },
        "SBSDNS": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "HostedZoneName": {
                    "Fn::Join": ["", [{"Ref": "RootDomainName"}, "."]]
                },
                "Comment": "Zone apex alias.",
                "RecordSets": [
                    {
                        "Name": {"Ref": "RootDomainName"},
                        "Type": "A",
                        "AliasTarget": {
                            "HostedZoneId": {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "S3hostedzoneID"]},
                            "DNSName": {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "websiteendpoint"]}
                        }
                    },
                    {
                        "Name": {
                            "Fn::Join": ["", ["www.", {"Ref":"RootDomainName"}]]
                        },
                        "Type": "CNAME",
                        "TTL" : "900",
                        "ResourceRecords" : [
                            {"Fn::GetAtt":["SBSWWWBucket", "DomainName"]}
                        ]
                    }
                ]
            }
        },
        "SBSLogsBucket": {
            "Type": "AWS::S3::Bucket"
        },
        "SBSDataTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [{
                    "AttributeName": "sbsID",
                    "AttributeType": "S"
                }, {
                    "AttributeName": "recordTimestamp",
                    "AttributeType": "N"
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "KeySchema": [{
                    "AttributeName": "sbsID",
                    "KeyType": "HASH"
                }, {
                    "AttributeName": "recordTimestamp",
                    "KeyType": "RANGE"
                }]
            }
        },
        "SBSUnitTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [{
                    "AttributeName": "sbsID",
                    "AttributeType": "S"
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "KeySchema": [{
                    "AttributeName": "sbsID",
                    "KeyType": "HASH"
                }]
            }
        },
        "WriteSBSData": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Handler": "index.handler",
            "Role": { "Fn::GetAtt" : ["SBSWriteRole", "Arn"] },
            "Code": {
              "ZipFile": { "Fn::Join": ["", [
                "exports.handler = function(event, context) {",
                " context.succeed('placeholder');",
                "};"
              ]]}
            },
            "Runtime": "nodejs",
            "Timeout": "25"
          }
        },
        "ReadSBSData": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Handler": "index.handler",
            "Role": { "Fn::GetAtt" : ["SBSReadRole", "Arn"] },
            "Code": {
              "ZipFile": { "Fn::Join": ["", [
                "exports.handler = function(event, context) {",
                " context.succeed('placeholder');",
                "};"
              ]]}
            },
            "Runtime": "nodejs",
            "Timeout": "25"
          }
        },
        "GetSBSFleet": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Handler": "index.handler",
            "Role": { "Fn::GetAtt" : ["SBSReadRole", "Arn"] },
            "Code": {
              "ZipFile": { "Fn::Join": ["", [
                "exports.handler = function(event, context) {",
                " context.succeed('placeholder');",
                "};"
              ]]}
            },
            "Runtime": "nodejs",
            "Timeout": "25"
          }
        },
       "SBSWriteRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": {
                    "Fn::Join": ["", ["/", "sbs", "/"]]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com", "ec2.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                }
            }
        },
        "SBSReadRole": {
             "Type": "AWS::IAM::Role",
             "Properties": {
                 "Path": {
                     "Fn::Join": ["", ["/", "sbs", "/"]]
                 },
                 "AssumeRolePolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [{
                         "Effect": "Allow",
                         "Principal": {
                             "Service": ["lambda.amazonaws.com", "ec2.amazonaws.com"]
                         },
                         "Action": ["sts:AssumeRole"]
                     }]
                 }
             }
         },
        "LambdaLogPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "sbs-lambdalogpolicy",
                "Roles": [{
                    "Ref": "SBSWriteRole"
                }, {
                    "Ref": "SBSReadRole"
                }],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "logs:*"
                        ],
                        "Resource": "arn:aws:logs:*:*:*"
                    }]
                }
            }
        },
        "S3Policy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "sbs-s3policy",
                "Roles": [{
                    "Ref": "SBSWriteRole"
                },{
                    "Ref": "SBSReadRole"
                }],
                "PolicyDocument": {
                    "Statement": [{
                        "Resource": [{
                            "Fn::Join": ["", ["arn:aws:s3:::", {
                                "Ref": "SBSLogsBucket"
                            }, "*"]]
                        }],
                        "Action": [
                            "s3:ListBucket",
                            "s3:Put*",
                            "s3:Get*",
                            "s3:*MultipartUpload*",
                            "s3:DeleteObject*"
                        ],
                        "Sid": "1",
                        "Effect": "Allow"
                    }, {
                        "Resource": ["arn:aws:s3:::*"],
                        "Action": ["s3:ListAllMyBuckets", "s3:GetBucketLocation"],
                        "Sid": "2",
                        "Effect": "Allow"
                    }]
                }
            }
        },
        "DynamoWritePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "sbs-ddbwritepolicy",
                "Roles": [{
                    "Ref": "SBSWriteRole"
                }],
                "PolicyDocument": {
                    "Statement": [{
                        "Resource": [{
                            "Fn::Join": ["", ["arn:aws:dynamodb:", {
                                "Ref": "AWS::Region"
                            }, ":", {
                                "Ref": "AWS::AccountId"
                            }, ":table/", {
                                "Ref": "SBSDataTable"
                            }, "*"]]
                        }],
                        "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem"
                        ],
                        "Sid": "1",
                        "Effect": "Allow"
                    }, {
                        "Resource": "*",
                        "Action": [
                            "dynamodb:DescribeTable",
                            "dynamodb:ListTables",
                            "dynamodb:CreateTable",
                            "cloudwatch:*"
                        ],
                        "Sid": "2",
                        "Effect": "Allow"
                    }]
                }
            }
        },
        "DynamoReadPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "sbs-ddbreadpolicy",
                "Roles": [{
                    "Ref": "SBSReadRole"
                }],
                "PolicyDocument": {
                    "Statement": [{
                        "Resource": [{
                            "Fn::Join": ["", ["arn:aws:dynamodb:", {
                                "Ref": "AWS::Region"
                            }, ":", {
                                "Ref": "AWS::AccountId"
                            }, ":table/", {
                                "Ref": "SBSDataTable"
                            }, "*"]] },{
                                "Fn::Join": ["", ["arn:aws:dynamodb:", {
                                    "Ref": "AWS::Region"
                                }, ":", {
                                    "Ref": "AWS::AccountId"
                                }, ":table/", {
                                    "Ref": "SBSUnitTable"
                                }, "*"]]
                        }],
                        "Action": [
                            "dynamodb:BatchGetItem",
                            "dynamodb:BatchWriteItem",
                            "dynamodb:Query",
                            "dynamodb:GetItem",
                            "dynamodb:Scan"
                        ],
                        "Sid": "1",
                        "Effect": "Allow"
                    }, {
                        "Resource": "*",
                        "Action": [
                            "dynamodb:DescribeTable",
                            "dynamodb:ListTables",
                            "dynamodb:CreateTable",
                            "cloudwatch:*"
                        ],
                        "Sid": "2",
                        "Effect": "Allow"
                    }]
                }
            }
        }
        },
    "Outputs": {
      "DynamoRegion": {
            "Value": {
                "Ref": "AWS::Region"
            }
        },
       "SBSDataDynamoDBTable": {
            "Value": {
                "Ref": "SBSDataTable"
            }
        },
        "SBSUnitInfoDynamoDBTable": {
             "Value": {
                 "Ref": "SBSUnitTable"
             }
         },
         "SBSLambdaWriteSBSData": {
              "Value": {
                  "Ref": "WriteSBSData"
              }
          },
          "SBSLambdaReadSBSData": {
               "Value": {
                   "Ref": "ReadSBSData"
               }
           },
           "SBSLambdaGetSBSFleet": {
                "Value": {
                    "Ref": "GetSBSFleet"
                }
            },
        "WebsiteURL": {
            "Value": {"Fn::GetAtt": ["SBSRootBucket", "WebsiteURL"]},
            "Description": "URL for website hosted on S3"
        },
        "LogsBucket": {
            "Value": {
                "Ref": "SBSLogsBucket"
            }
        }
    }
}
